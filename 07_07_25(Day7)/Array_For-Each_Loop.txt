                                                ✅ Concept 1: Array
🔸 What is an Array?
An array is a collection of elements (same type) stored in contiguous memory locations. It allows you to group related data together.

🌍 Real-World Analogy:
A train with multiple coaches — all coaches are of the same type (passenger/freight) and ordered one after another.

🧑‍💻 Java Example:
Code(java):

import java.util.Scanner; // Import the Scanner class to get user input

public class ArrayExample {
    public static void main(String[] args) {
        // Create a Scanner object to read input from the console
        Scanner input = new Scanner(System.in);

        System.out.print("How many scores do you want to enter? ");
        int numberOfScores = input.nextInt(); // Read the number of scores the user wants to enter

        // Declare an array to store the scores, with the size determined by user input
        int[] scores = new int[numberOfScores];

        // Loop to get each score from the user
        for (int i = 0; i < scores.length; i++) {
            System.out.print("Enter score " + (i + 1) + ": ");
            scores[i] = input.nextInt(); // Read each score and store it in the array
        }

        System.out.println("\n--- Your Scores ---");
        // Loop to display all the scores entered by the user
        for (int i = 0; i < scores.length; i++)
            System.out.println("Score " + (i + 1) + ": " + scores[i]);
        

        input.close(); // Close the scanner to release system resources
    }
}
🧠 Output:

How many scores do you want to enter? 3
Enter score 1: 26
Enter score 2: 56
Enter score 3: 78

--- Your Scores ---
Score 1: 26
Score 2: 56
Score 3: 78

✅ Concept 2: Enhanced for loop (for-each loop)
🔸 What is an Enhanced for loop?
It's a simplified version of a for loop used for iterating over arrays or collections without using an index.

🌍 Real-World Analogy:
You pass around a box of chocolates and everyone takes one, one by one, without keeping track of how many have been taken.

🧑‍💻 Java Example:
Code(java):
                                         Without Scanner Class
public class ForEachExample {
    public static void main(String[] args) {
        // Declare and initialize an array of strings called 'fruits'.
        // This array holds three fruit names.
        String[] fruits = {"Apple", "Banana", "Mango"};

        // This is a for-each loop (also known as an enhanced for loop).
        // It iterates over each element in the 'fruits' array.
        // In each iteration, the current element (e.g., "Apple", then "Banana", then "Mango")
        // is assigned to the 'fruit' variable (which is of type String, matching the array's element type).
        for (String fruit : fruits) {
            // Print the current fruit name to the console.
            System.out.println("Fruit: " + fruit);
        }
    }
}

                                                    With Scanner Class
import java.util.Scanner; // Import the Scanner class

public class ForEachExample {
    public static void main(String[] args) {
        // Create a Scanner object to read input from the console
        Scanner input = new Scanner(System.in);

        System.out.print("How many fruits do you want to enter? ");
        int numberOfFruits = input.nextInt(); // Read the number of fruits the user wants to enter

        // Consume the leftover newline character after reading the integer
        // This is important because nextLine() reads until a newline, and nextInt() leaves it.
        input.nextLine(); 

        // Declare a String array to store the fruits, with the size determined by user input
        String[] fruits = new String[numberOfFruits];

        System.out.println("Please enter the fruit names:");
        // Loop to get each fruit name from the user
        for (int i = 0; i < fruits.length; i++) {
            System.out.print("Enter fruit " + (i + 1) + ": ");
            fruits[i] = input.nextLine(); // Read each fruit name (including spaces)
        }

        System.out.println("\n--- Your Entered Fruits ---");
        // Use a for-each loop to display all the fruit names entered by the user
        for (String fruit : fruits) {
            System.out.println("Fruit: " + fruit);
        }

        input.close(); // Close the scanner to release system resources
    }
}
Explanation of Changes and Why:

1)import java.util.Scanner; : This line is added at the top to import the Scanner 
 class, which is necessary for reading user input.

2)Scanner input = new Scanner(System.in); : Inside the main method, an object 
 of the Scanner class is created. 
 "System.in" indicates that the scanner will read input from the standard input
 stream (usually the keyboard).

3)System.out.print("How many fruits do you want to enter? "); : Prompts the user
to specify how many fruits they will enter.

4)int numberOfFruits = input.nextInt(); : Reads an integer value from the user 
 (representing the number of fruits) and stores it in the numberOfFruits variable.

5)input.nextLine(); // Consume the leftover newline: This is a crucial line.
->When input.nextInt() reads an integer, it only consumes the integer characters,
  leaving the newline character (\n) in the input buffer. 
->If you immediately call input.nextLine() after input.nextInt(), the nextLine() 
 would consume this leftover newline character and effectively skip reading 
the first fruit name. 
->Calling input.nextLine() here "eats" that leftover newline, preparing the scanner
 for the actual fruit names.

6)String[] fruits = new String[numberOfFruits]; : The "fruits" array is now 
 initialized with a size (numberOfFruits) that is determined by the user's input,
 rather than being hardcoded.

7)First for loop (traditional for loop):

 .for (int i = 0; i < fruits.length; i++): A traditional for loop is used here because 
 we need to access the index (i) to prompt the user for "Fruit 1", "Fruit 2", etc.,
 and to assign the input directly to fruits[i].

 .System.out.print("Enter fruit " + (i + 1) + ": "); : Prompts the user to enter each fruit.

 .fruits[i] = input.nextLine();: Reads the entire line of input (allowing for fruit names with spaces)
 and stores it in the current position (i) of the fruits array.

8)Second for loop (for-each loop):

->The for (String fruit : fruits) loop remains the same.
->This is because once the fruits array is populated, the for-each loop is still the
 most elegant way to iterate through all its elements and print them.

9)input.close(); : It's good practice to close the Scanner object when you are 
 finished using it to release system resources.
🧠 Output:
  
Fruit: Apple
Fruit: Banana
Fruit: Mango
                                           ✅ Summary Table
Concept	         Use Case	                                  Real-Life Analogy
Array	        Group similar data	                  Coaches in a train
Enhanced for loop	Simple iteration	Passing chocolates in a group