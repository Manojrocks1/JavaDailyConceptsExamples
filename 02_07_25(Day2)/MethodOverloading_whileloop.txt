✅ Concept 1: Method Overloading
🔹 Definition:
Method overloading allows you to define multiple methods with the same name but different parameters.

🌍 Example Analogy:
Like a coffee machine that can make coffee with:

just water

water + milk

water + milk + sugar
All under the same button ("Make Coffee"), but depending on what's given.

🧑‍💻 Java Example:
// Define a class named Printer
class Printer {

    // This is the first 'print' method.
    // It takes a String as an argument and prints it directly.
    // This is an example of method overloading.
    void print(String msg) {
        System.out.println(msg); // Prints the string message to the console
    }

    // This is the second 'print' method.
    // It takes an integer (int) as an argument and prints it with a prefix.
    // This is another overloaded method, having the same name but different parameter types.
    void print(int number) {
        System.out.println("Number: " + number); // Prints the integer with a "Number: " prefix
    }

    // You could add more 'print' methods with different parameter lists
    // For example:
    /*
    void print(double decimal) {
        System.out.println("Decimal: " + decimal);
    }

    void print(boolean value) {
        System.out.println("Boolean: " + value);
    }
    */
}

// The main class where the program execution begins
public class Main {
    public static void main(String[] args) {
        // Create an object (instance) of the Printer class
        Printer p = new Printer();

        // Call the 'print' method with a String argument.
        // The Java compiler automatically selects the 'print(String msg)' method
        // because the argument provided is a String.
        p.print("Hello"); // Expected output: Hello

        // Call the 'print' method with an integer argument.
        // The Java compiler automatically selects the 'print(int number)' method
        // because the argument provided is an integer.
        p.print(100); // Expected output: Number: 100
    }
}

o/p:
   Hello
   Number: 100
Explanation of Key Concepts:
Classes (Printer, Main): Blueprints for creating objects.

Objects (p): Instances of a class. p is an object of the Printer class.

Methods (print, main, println): Blocks of code that perform specific actions.

void Keyword: Indicates that a method does not return any value.

Method Overloading: This is the core concept demonstrated here. It means having multiple methods in the same class with the same name but different parameter lists (i.e., different number of parameters or different types of parameters).

The Printer class has two methods named print.

One takes a String.

The other takes an int.

The Java compiler decides which print method to call based on the type of the argument you pass when you call it ("Hello" is a String, 100 is an int).

System.out.println(): A standard Java method used to print output to the console, followed by a new line.

main Method (public static void main(String[] args)): The entry point of any Java application. 
->When you run a Java program, the code inside the main method is executed first.

✅ Concept 2: While Loop
🔹 Definition:
The while loop runs a block of code as long as a condition is true.

🌍 Example Analogy:
Keep washing dishes while the sink has dirty plates.

🧑‍💻 Java Example:

Code: 

public class Countdown {
    public static void main(String[] args) {
        int i = 5;
        while (i > 0) {
            System.out.println("Countdown: " + i);
            i--;
        }
    }
}

o/p:
Countdown: 5
Countdown: 4
Countdown: 3
Countdown: 2
Countdown: 1
